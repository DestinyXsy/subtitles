import { ENUM_RUN_STATE, ENUM_NETWORK_STATE, ZegoDataReport, ZegoLogger } from './zego.entity';
import { RetryRoomHandler } from './modules/retryRoomHandler';
export declare class StateCenter {
    private logger;
    private dataReport;
    _debug: boolean;
    set debug(enable: boolean);
    get debug(): boolean;
    _testEnvironment: boolean;
    set testEnvironment(env: boolean);
    get testEnvironment(): boolean;
    _env: number;
    set ENV(env: number);
    get ENV(): number;
    debugCustom: boolean;
    third_token: string;
    configOK: boolean;
    appid: number;
    userid: string;
    sessionid: string;
    roomid: string;
    roomSessionId: string;
    bizVersion: string;
    relateService: Array<string>;
    token: string;
    role: 1 | 2;
    server: string;
    serverBak: string;
    idName: string;
    nickName: string;
    userStateUpdate: boolean;
    maxMemberCount: number;
    roomCreateFlag: number;
    local_time_deviation: number;
    runState: ENUM_RUN_STATE;
    lastRunState: ENUM_RUN_STATE;
    lastRoomState: 'DISCONNECTED' | 'CONNECTING' | 'CONNECTED';
    roomState: 'DISCONNECTED' | 'CONNECTING' | 'CONNECTED';
    callbackList: {
        [index: string]: Function;
    };
    listenerList: {
        [index: string]: Array<Function>;
    };
    reportList: {
        [index: string]: Function;
    };
    reportSeqList: {
        login: number;
        relogin: number;
    };
    roomTryHandler?: RetryRoomHandler;
    networkState: ENUM_NETWORK_STATE;
    roomRetryTime: number;
    constructor(logger: ZegoLogger, dataReport: ZegoDataReport);
    isLogin(): boolean;
    getRequestId(): string;
    actionListener(listener: string, ...args: Array<any>): void;
    private _sdkVersion;
    set sdKVersion(version: string);
    get sdKVersion(): string;
}
