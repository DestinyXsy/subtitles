import { LogConfig, ZegoInnerEvent, ZegoLogger, ZegoDataReport, ZegoError } from './zego.entity';
import { ZegoRTMEvent, ZegoRoomConfig, ZegoUser } from '../code/zh/ZegoExpressEntity';
import { StateCenter } from './stateCenter';
import { LiveRoomModules } from './modules';
export declare class ZegoExpressWebRTM {
    private logger;
    private dataReport;
    version: string;
    stateCenter: StateCenter;
    modules: LiveRoomModules;
    constructor(appID: number, server: string | string[], logger: ZegoLogger, dataReport: ZegoDataReport, version: string, ENV: number);
    private bindWindowListener;
    private bindWxListener;
    private netOnLineHandle;
    private netOffLineHandle;
    setLogConfig(option: LogConfig): boolean;
    setDebugVerbose(enable: boolean): void;
    private setDebug;
    renewToken(token: string, roomID?: string): boolean;
    loginRoom(roomID: string, token: string, user: ZegoUser, config?: ZegoRoomConfig): Promise<boolean>;
    private loginReport;
    logoutRoom(roomID?: string): void;
    sendCustomCommand(roomID: string, command: string | Record<string, any>, toUserList: string[]): Promise<{
        errorCode: number;
        extendedData: string;
    }>;
    _sendCustomCommand(roomID: string, command: string | Record<string, any>, toUserList: string[]): Promise<{
        seq: number;
        errorCode: number;
        extendedData: string;
    }>;
    sendBroadcastMessage(roomID: string, message: string): Promise<{
        errorCode: number;
        messageID: number;
        extendedData: string;
    }>;
    _sendBroadcastMessage(roomID: string, message: string, category?: 1 | 2, type?: 1 | 2 | 3): Promise<{
        seq: number;
        errorCode: number;
        messageID: number;
        extendedData: string;
    }>;
    setRoomExtraInfo(roomID: string, type: string, data: string): Promise<{
        errorCode: number;
    }>;
    _setRoomExtraInfo(roomID: string, type: string, data: string): Promise<{
        seq: number;
        errorCode: number;
    }>;
    sendBarrageMessage(roomID: string, message: string): Promise<{
        errorCode: number;
        messageID: string;
        extendedData: string;
    }>;
    _sendBarrageMessage(roomID: string, message: string, category?: 1 | 2, type?: 1 | 2 | 3): Promise<{
        seq: number;
        errorCode: number;
        messageID: string;
        extendedData: string;
    }>;
    sendRelayMessage(type: string, data: string, success: (seq: number) => void, error: (err: ZegoError, seq: number) => void): void;
    requestJoinLive(destIdName: string, success: (seq: number) => void, error: (err: ZegoError, seq: number) => void, resultCallback: (result: boolean, fromUserId: string, fromUserName: string) => void): boolean;
    inviteJoinLive(destIdName: string, success: (seq: number) => void, error: (err: ZegoError, seq: number) => void, resultCallback: (result: boolean, fromUserId: string, fromUserName: string) => void): boolean;
    endJoinLive(destIdName: string, success: (seq: number) => void, error: (err: ZegoError, seq: number) => void): boolean;
    respondJoinLive(requestId: string, respondResult: boolean, success?: (seq: number) => void, error?: (err: ZegoError, seq: number) => void): boolean;
    getVersion(): string;
    setSdkBizVersion(bizVersion: string): void;
    setSdkLoginRelateService(relateService: Array<string>): void;
    on<K extends keyof ZegoRTMEvent>(event: K, callBack: ZegoRTMEvent[K]): boolean;
    off<K extends keyof ZegoRTMEvent>(event: K, callBack?: ZegoRTMEvent[K]): boolean;
    _on<K extends keyof ZegoInnerEvent>(event: K, callBack: ZegoInnerEvent[K]): boolean;
    _off<K extends keyof ZegoInnerEvent>(event: K, callBack?: ZegoInnerEvent[K]): boolean;
    isTestEnvironment(): boolean;
    isLogin(): boolean;
    getAppID(): number;
    getUserID(): string;
    getToken(): string;
    getRoomID(): string;
    setRoomCreateFlag(flag: number): void;
    setRole(role: 1 | 2): void;
    getSessionId(): string;
}
