import { TryHandler } from './retryHandler';
import { ZegoLogger, ZegoError } from '../zego.entity';
import { RoomHandler } from './roomHandler';
import { StateCenter } from '../stateCenter';
import { ZegoRoomConfig, ZegoUser } from '../../code/zh/ZegoExpressEntity';
export declare class RetryRoomHandler extends TryHandler {
    protected logger: ZegoLogger;
    protected stateCenter: StateCenter;
    roomHandler: RoomHandler;
    roomID: string;
    token: string;
    user: ZegoUser;
    server: string;
    serverBak: string;
    config?: ZegoRoomConfig;
    constructor(logger: ZegoLogger, stateCenter: StateCenter);
    renewToken(token: string): void;
    initRoom(roomHandler: RoomHandler, roomID: string, token: string, user: ZegoUser, server: string, serverBak: string, config?: ZegoRoomConfig): void;
    active(isFirst?: boolean): void;
    startMaxTime(): void;
    stopMaxTime(): void;
    onactive(success: boolean, error?: ZegoError): void;
    handleError(error: ZegoError, isServerError?: boolean): boolean;
    handleLoginFinish(success: boolean, error?: ZegoError, isServerError?: boolean): void;
}
