import { ZegoLogger } from './zego.entity';
import { StateCenter } from './stateCenter';
export declare class LiveRoomService {
    private stateCenter;
    private logger;
    private service;
    private cmdSeq;
    private responseRouters;
    constructor(stateCenter: StateCenter, logger: ZegoLogger);
    private checkResponse;
    private handleSendCommandMsgRsp;
    onPush(): void;
    handlePushKickout(msg: any): void;
    handlePushCustomMsg(msg: any): void;
    handlePushRoomMsg(msg: any): void;
    handlePushUserStateUpdateMsg(msg: any): void;
    handlePushMergeMsg(msg: any): void;
    handlePushTransMsg(msg: any): void;
    handleBigImMsgRsp(msg: any): void;
    handlePushSignalMsg(msg: any): void;
    closeHandler(handler: (evt: any) => void): void;
    openHandler(handler: () => void): void;
    errorHandler(handler: (evt: Event) => void): void;
    private getHeader;
    startCheck(): void;
    stopCheck(): void;
    isDisConnect(): boolean;
    createSocket(server: string): void;
    closeSocket(): void;
    sendMessage(cmd: string, body: any, suc: Function, err: Function, theHeader?: any, cmdRsp?: string): number;
    on(cmd: string, callBack: (msg: any) => void): void;
    login(suc: Function, err: Function): number;
    logout(suc: Function, err: Function): number;
    heartBeat(suc: Function, err: Function): number;
    fetchUserList(body: any, suc: Function, err: Function): number;
    fetchUserListV2(body: any, suc: Function, err: Function): number;
    fetchReliableMessage(body: any, suc: Function, err: Function): number;
    sendReliableMessage(body: any, suc: Function, err: Function): number;
    sendRoomMsg(body: any, suc: Function, err: Function): number;
    sendCustomCommand(body: any, suc: Function, err: Function): number;
    sendBigRoomMessage(body: any, suc: Function, err: Function): number;
    sendRelayMessage(body: any, suc: Function, err: Function): number;
    sendSignalCmd(body: any, suc: Function, err: Function): number;
}
