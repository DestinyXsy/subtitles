import { ZegoServerResponse, ZegoUser, ZegoRoomConfig, ZegoRTMEvent, ZegoLogConfig } from './ZegoExpressEntity';
import { ZegoExpressWebRTM } from '../../src';
import { ZegoLogger, ZegoDataReport } from '../../src/zego.entity';
export declare class ZegoExpressWebRTMEngine {
    protected logger: ZegoLogger;
    protected dataReport: ZegoDataReport;
    zegoWebRTM: ZegoExpressWebRTM;
    static version: string;
    constructor(appID: number, server: string | string[], ENV?: number);
    getVersion(): string;
    loginRoom(roomID: string, token: string, user: ZegoUser, config?: ZegoRoomConfig): Promise<boolean>;
    logoutRoom(roomID?: string): void;
    off<K extends keyof ZegoRTMEvent>(event: K, callBack?: ZegoRTMEvent[K]): boolean;
    on<K extends keyof ZegoRTMEvent>(event: K, callBack: ZegoRTMEvent[K]): boolean;
    renewToken(token: string, roomID?: string): boolean;
    sendBarrageMessage(roomID: string, message: string): Promise<ZegoServerResponse>;
    sendBroadcastMessage(roomID: string, message: string): Promise<ZegoServerResponse>;
    sendCustomCommand(roomID: string, message: string, toUserIDList: string[]): Promise<ZegoServerResponse>;
    setDebugVerbose(enable: boolean): void;
    setLogConfig(config: ZegoLogConfig): boolean;
    setRoomExtraInfo(roomID: string, key: string, value: string): Promise<ZegoServerResponse>;
}
export { getReportSeq, getSeq, ZegoLogger, ZegoDataReport } from '../../src/zego.entity';
