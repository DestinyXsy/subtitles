/// <reference path="../../types/global.d.ts" />
import { ZegoMediaElement } from "../../types";
import { BaseCenter } from "../common";
import { AudioMixConfig, PlayOption, PublishStreamConstraints, ZegoMediaStreamConstraints } from "../common/zego.entity";
import { MediaUtil } from "../util/mediaUtil";
export declare class ZegoClient extends BaseCenter {
    constructor();
    static screenShotReady: boolean;
    static mediaRecorder: MediaRecorder;
    static recordedBlobs: Blob[];
    static recordType: string;
    enableCamera(localVideo: HTMLMediaElement, enable: boolean): boolean;
    enableMicrophone(localVideo: HTMLMediaElement, enable: boolean): boolean;
    setLocalAudioOutput(localVideo: HTMLMediaElement, audioOutput: string): boolean;
    setPlayAudioOutput(streamid: string, audioOutput: string): boolean;
    setCustomSignalUrl(signalUrl: Array<string>): void;
    setQualityMonitorCycle(timeInMs: number): void;
    startPlayingStream(streamid: string, remoteVideo: HTMLMediaElement, audioOutput?: string, playOption?: PlayOption): boolean;
    stopPlayingStream(streamid: string): boolean;
    startPreview(localVideo: HTMLMediaElement, mediaStreamConstraints: ZegoMediaStreamConstraints, success: Function, error: Function): boolean;
    stopPreview(localVideo: HTMLMediaElement): boolean;
    startPublishingStream(streamid: string, localVideo: HTMLMediaElement, extraInfo?: string, playOption?: PlayOption): boolean;
    stopPublishingStream(streamid: string): boolean;
    preloadEffect(id: number, effectUrl: string, callBack?: Function): void;
    playEffect(audioMixConfig: AudioMixConfig, start?: Function, end?: Function): void;
    pauseEffect(streamid: string): void;
    stopEffect(streamid: string): void;
    resumeEffect(streamid: string): void;
    unloadEffect(effecId: number): boolean;
    startMixingAudio(streamID: string, audio: HTMLMediaElement | HTMLMediaElement[], replace?: boolean): boolean;
    stopMixingAudio(streamID: string, audio?: Array<HTMLMediaElement>): boolean;
    setMixingAudioVolume(streamid: string, volume: number): boolean;
    startScreenShotChrome(callBack: (suc: boolean, stream: MediaStream | null, err?: string) => void): void;
    startScreenSharing(screenConfig: {
        width?: number;
        height?: number;
        frameRate?: number;
        displaySurface?: string;
    }, audio: boolean, callBack: (suc: boolean, stream: MediaStream | null, err?: any) => void): void;
    startScreenShotFirFox(screenConfig: {
        width?: number;
        height: number;
        frameRate?: number;
        bitRate?: number;
    }, mediaSource: "screen" | "application" | "window", audio: boolean, callBack: (suc: boolean, stream: MediaStream | null) => void): void;
    stopScreenShot(stream: MediaStream): void;
    switchDevice(type: "audio" | "video", localVideo: HTMLMediaElement, deviceId: string, success: Function, error: Function): void;
    filterStreamList(streamId?: string): any[];
    setPublishStreamConstraints(streamID: string, constraints: PublishStreamConstraints, success: Function, error: Function): void;
    setSoundLevelDelegate(bool: boolean, timeInMs?: number): void;
    static supportDetection(success: Function, error: Function): void;
    enumDevices(deviceInfoCallback: Function, error: Function): void;
    static enumDevices(deviceInfoCallback: Function, error: Function): void;
    static getAudioInfo(el: HTMLVideoElement | HTMLAudioElement, errCallBack: (param: any) => void, option?: {
        type: string;
        bufferSize?: number;
        channels?: number;
        sampleBit?: 8 | 16;
        sampleRate: number;
    }): MediaUtil | null;
    private static handleDataAvailable;
    static startRecord(el: ZegoMediaElement, constraints?: {
        audio?: false;
        audioInput?: string;
    }, callBack?: (err?: any) => void): Promise<void>;
    static stopRecord(): void;
    static resumeRecord(): void;
    static pauseRecord(): void;
    static saveRecord(name?: string): string | undefined;
    static resumeRecordAudio(): void;
    static pauseRecordAudio(): void;
    static getRecordAudio(): string | undefined;
    static takeSnapShot(el: HTMLVideoElement, img: HTMLImageElement): void;
    static saveSnapShot(el: HTMLVideoElement, name: string): void;
}
