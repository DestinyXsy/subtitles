import { ZegoDataReport } from "zego-express-logger";
import { Config } from "../common/zego.entity";
import { ZegoLogger } from "zego-express-logger";
export declare class ClientUtil {
    static checkIllegalCharacters(str: string): boolean;
    static isUrl(str: string): boolean;
    static registerCallback(fName: string, option: {
        success?: Function;
        error?: Function;
    }, callbackList: {
        [index: string]: Function;
    }): void;
    static actionErrorCallback(fName: string, callbackList: {
        [index: string]: Function;
    }): Function;
    static actionSuccessCallback(fName: string, callbackList: {
        [index: string]: Function;
    }): Function;
    static logReportCallback(logEvent: string, dataReport: ZegoDataReport, reportSeq: number, callbackList: {
        [index: string]: Function;
    }): void;
    static unregisterCallback(fName: string, callbackList: {
        [index: string]: Function;
    }): void;
    static decodeServerError(code: number, msg: string): {
        code: number;
        message: string;
    };
    static getLiveRoomError(code: number): any;
    static mixServerError(code: number): any[];
    static getKickoutError(code: number): any;
    static dataReportEvent(dataReport: ZegoDataReport, reportSeq: number, reportName: string, eventName: string, args: any): void;
    static isKeepTryLogin(code: number): boolean;
    static mergeStreamList(idName: string, oldStreamList: any[], newStreamList: any[], callbackResult: {
        (addStreamList: any[], delStreamList: any[], updateStreamList: any[]): void;
        (arg0: any[], arg1: any[], arg2: any[]): void;
    }): void;
    static checkInteger(num: number | undefined, positive?: boolean): boolean;
    static checkValidNumber(param: number, min?: number, max?: number): boolean;
    static uuid(len?: number, radix?: number): string;
    static checkConfigParam(option: Config, logger: ZegoLogger): boolean;
    static compareVersion(v1: string[] | string, v2: string | string[]): 0 | 1 | -1;
    static isSupportLive(sucCall: {
        (arg0: {
            code: number;
            msg: string;
        }): void;
        (arg0: {
            code: number;
            msg: string;
        }): void;
    }, errCall: (arg0: any) => void): void;
    static inlineWorker(func: Function): Worker | null;
    static getBrowser(): string;
    static getPublisherStateType(type: 0 | 1 | 2): string;
    static getPlayerStateType(type: 0 | 1 | 2): string;
    static getSteamUpdateType(type: 0 | 1): string;
    static checkCameraParams(cameras: {
        width?: number;
        height?: number;
        frameRate?: number;
        bitRate?: number;
    }, errorCallback: Function): boolean;
    static makeCallbackStreamList(streamList: any[]): {
        anchor_id_name: any;
        stream_gid: any;
        anchor_nick_name: any;
        extra_info: any;
        stream_id: any;
        urls_flv: string;
        urls_rtmp: string;
        urls_hls: string;
        urls_https_flv: string;
        urls_https_hls: string;
    }[];
}
