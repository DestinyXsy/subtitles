import { StateCenter } from './stateCenter';
import { CdnPushConfig, MixStreamConfig, ERRO, MixStreamAdvance, ZegoResponse } from './zego.entity';
import { ZegoDataReport, ZegoLogger } from '../common/zego.entity';
import { ZegoExpressWebRTM } from 'zego-express-engine-webrtm/sdk/src';
import { ZegoStreamCenter } from './streamCenter';
export declare class StreamHandler {
    private logger;
    private stateCenter;
    private dataReport;
    private streamCenter;
    private rtm;
    private minStreamSeq;
    private streamSeqMergeMap;
    private streamSeqMergeTimer;
    private streamListHBMergeInterval;
    private streamListMergeInterval;
    constructor(logger: ZegoLogger, stateCenter: StateCenter, rtm: ZegoExpressWebRTM, dataReport: ZegoDataReport, streamCenter: ZegoStreamCenter);
    private setCDNInfo;
    onStreamUpdated(roomid: string, type: number, streamList: any[]): void;
    onStreamExtraInfoUpdated(roomid: string, streamList: any[]): void;
    handleStreamStart(msg: any): void;
    onPublishStateUpdate(type: number, streamId: string, error: ERRO): void;
    updateStreamInfo(streamid: string, cmd: string | number, stream_extra_info?: string, error?: Function): void;
    handleStreamUpdateRsp(msg: any): void;
    handleFetchStreamListRsp(msg: any): void;
    private handleFullUpdateStream;
    private handlePushStreamUpdateMsg;
    private handleAddedStreamList;
    private handleDeletedStreamList;
    private handleUpdatedStreamList;
    fetchStreamList(): void;
    private handleReconnectStream;
    makeCallbackStreamList(streamList: any[]): any;
    updateMixStream(mixStreamConfig: MixStreamConfig, successCallback: Function, errorCallback: (err: ZegoResponse) => void): boolean;
    sendBizChannelRequest(reqBody: any, success: Function, error: Function, isRetry?: boolean): void;
    setMixerTaskConfig(advance: MixStreamAdvance): Promise<ZegoResponse>;
    stopMixStream(taskid: string, successCallback: Function, errorCallback: (err: ZegoResponse) => void, outputStreamId?: string, outputUrl?: string): boolean;
    updateStreamExtraInfo(streamid: string, extraInfo: string): boolean;
    setStreamExtraInfo(streamID: string, extraInfo: string): Promise<ZegoResponse>;
    _setStreamExtraInfo(streamID: string, extraInfo: string): boolean;
    private _handleStreamInfo;
    publishTarget(cdnPushConfig: CdnPushConfig): Promise<ZegoResponse>;
    _publishTarget(cdnPushConfig: CdnPushConfig, success: (result: ZegoResponse) => void, error: (result: ZegoResponse) => void): void;
    patchStreamList(msg: any): void;
    mergeStreamByStreamSeq(cmd: number, streamSeq: number, streamList: any[]): void;
    handleMergeTimeout(): void;
    mergeStream(streamSeqList: any[]): void;
    reset(): void;
}
